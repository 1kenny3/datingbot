import logging
from typing import List, Optional, Tuple
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from database import add_profile, get_profile, add_like, check_mutual_like, get_all_profiles_except, get_user_likes


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7520048118:AAE_qdahHxliOAGLRYT99NbYpKD8scOT4Wo'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProfileStates(StatesGroup):
    name = State()
    age = State()
    description = State()
    photo = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"))
    return keyboard

def get_like_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üëç –õ–∞–π–∫"), KeyboardButton("üëé –î–∏–∑–ª–∞–π–∫"))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def create_profile(message: types.Message):
    await ProfileStates.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message_handler(state=ProfileStates.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await ProfileStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")

@dp.message_handler(lambda message: not message.text.isdigit(), state=ProfileStates.age)
async def process_age_invalid(message: types.Message):
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.message_handler(lambda message: message.text.isdigit(), state=ProfileStates.age)
async def process_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if age < 18 or age > 100:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return
    await state.update_data(age=age)
    await ProfileStates.next()
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:")

@dp.message_handler(state=ProfileStates.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await ProfileStates.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ:")

@dp.message_handler(content_types=['photo'], state=ProfileStates.photo)
async def process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id
    
    add_profile(
        message.from_user.id,
        data['name'],
        data['age'],
        data['description'],
        photo_id
    )
    
    await state.finish()
    await message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
        reply_markup=get_main_keyboard()
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
@dp.message_handler(lambda message: message.text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def start_viewing(message: types.Message):
    user_id = message.from_user.id
    if not get_profile(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!")
        return

    profiles = get_all_profiles_except(user_id)
    if not profiles:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return

    state = dp.current_state(user=user_id)
    await state.update_data(profiles=profiles, current_profile_idx=0)
    await send_next_profile(message, user_id)

async def send_next_profile(message: types.Message, user_id: int):
    try:
        state = dp.current_state(user=user_id)
        data = await state.get_data()
        
        profiles = data.get('profiles', [])
        current_profile_idx = data.get('current_profile_idx', 0)
        
        if current_profile_idx >= len(profiles):
            await message.answer(
                "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã.",
                reply_markup=get_main_keyboard()
            )
            await state.reset_data()
            return
            
        profile = profiles[current_profile_idx]
        profile_id, name, age, description, photo_id = profile
        
        await state.update_data(
            current_profile_idx=current_profile_idx + 1,
            current_profile_id=profile_id,
            viewing_profile=True
        )
        
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo_id,
            caption=f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–û —Å–µ–±–µ: {description}",
            reply_markup=get_like_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error sending profile: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç—ã.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
@dp.message_handler(lambda message: message.text in ["üëç –õ–∞–π–∫", "üëé –î–∏–∑–ª–∞–π–∫"])
async def process_like_dislike(message: types.Message):
    user_id = message.from_user.id
    action = message.text
    logger.info(f"User_id {user_id} selected {action}")

    try:
        state = dp.current_state(user=user_id)
        data = await state.get_data()
        logger.info(f"Current state data for user {user_id}: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥—è—â–∏–π –ª–∞–π–∫
        current_like_from = data.get('current_like_from')
        
        if current_like_from is not None:
            logger.info(f"Processing reply like from {current_like_from}")
            
            if action == "üëé –î–∏–∑–ª–∞–π–∫":
                await message.answer(
                    "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.",
                    reply_markup=get_main_keyboard()
                )
                await state.reset_data()
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω—ã–π –ª–∞–π–∫
            add_like(user_id, current_like_from)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
            if check_mutual_like(user_id, current_like_from):
                user_profile = get_profile(user_id)
                liked_user_profile = get_profile(current_like_from)
                
                if user_profile and liked_user_profile:
                    user_contact = f"@{message.from_user.username}" if message.from_user.username else f"ID: {user_id}"
                    try:
                        liked_user = await bot.get_chat(current_like_from)
                        liked_user_contact = f"@{liked_user.username}" if liked_user.username else f"ID: {current_like_from}"
                    except Exception as e:
                        logger.error(f"Error getting liked user chat: {e}")
                        liked_user_contact = f"ID: {current_like_from}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    name, age, description, photo_id = liked_user_profile
                    await bot.send_photo(
                        user_id,
                        photo=photo_id,
                        caption=f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {name} ({age} –ª–µ—Ç).\n"
                               f"–û —Å–µ–±–µ: {description}\n"
                               f"–ö–æ–Ω—Ç–∞–∫—Ç: {liked_user_contact}",
                        reply_markup=get_main_keyboard()
                    )
                    
                    name, age, description, photo_id = user_profile
                    await bot.send_photo(
                        current_like_from,
                        photo=photo_id,
                        caption=f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {name} ({age} –ª–µ—Ç).\n"
                               f"–û —Å–µ–±–µ: {description}\n"
                               f"–ö–æ–Ω—Ç–∞–∫—Ç: {user_contact}",
                        reply_markup=get_main_keyboard()
                    )
            
            await state.reset_data()
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ª–∞–π–∫ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç
        current_profile_id = data.get('current_profile_id')
        viewing_profile = data.get('viewing_profile', False)

        if not viewing_profile or current_profile_id is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ö–æ–¥—è—â–∏–µ –ª–∞–π–∫–∏ –≤ –±–∞–∑–µ
            liked_by = get_user_likes(user_id)
            if liked_by:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ª–∞–π–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
                last_like_from = liked_by[-1]
                await state.update_data(current_like_from=last_like_from)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                return await process_like_dislike(message)
            else:
                await message.answer(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.",
                    reply_markup=get_main_keyboard()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ª–∞–π–∫–∞
        logger.info(f"Processing regular like for profile {current_profile_id}")
        
        if action == "üëé –î–∏–∑–ª–∞–π–∫":
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        else:
            add_like(user_id, current_profile_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
            user_profile = get_profile(user_id)
            if user_profile:
                liked_state = dp.current_state(user=current_profile_id)
                await liked_state.set_data({'current_like_from': user_id})
                
                name, age, description, photo_id = user_profile
                await bot.send_photo(
                    current_profile_id,
                    photo=photo_id,
                    caption=f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–∏–ª–∞ –ª–∞–π–∫ –æ—Ç {name} ({age} –ª–µ—Ç).\n"
                           f"–û —Å–µ–±–µ: {description}\n\n"
                           "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_like_keyboard()
                )

        await send_next_profile(message, user_id)

    except Exception as e:
        logger.error(f"Error processing like/dislike: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=get_main_keyboard()
        )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
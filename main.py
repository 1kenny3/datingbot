import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional
import os
from dotenv import load_dotenv
from profile_editor import register_handlers


from database import (
    get_profile, add_profile, get_matching_profiles, add_like,
    get_user_interests, add_user_interests, get_all_interests,
    add_viewed_profile, check_mutual_like, add_report, add_block,
    get_recent_likes, update_last_active, clear_user_interests,
    update_username, get_all_users, get_users_by_interests
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProfileStates(StatesGroup):
    name = State()
    age = State()
    gender = State()
    looking_for = State()
    city = State()
    description = State()
    photo = State()
    interests = State()
    broadcast_message = State()
    broadcast_interests = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    profile = get_profile(user_id)
    
    if profile:
        keyboard.add(KeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"))
        keyboard.add(KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        
        recent_likes = get_recent_likes(user_id)
        if recent_likes:
            keyboard.add(KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª"))
            
        keyboard.add(KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
        keyboard.add(KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
    else:
        keyboard.add(KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
    
    return keyboard

def get_like_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        KeyboardButton("üëé –î–∏–∑–ª–∞–π–∫"),
        KeyboardButton("‚ù§Ô∏è –õ–∞–π–∫")
    )
    keyboard.add(KeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"))
    keyboard.add(KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_gender_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π"))
    return keyboard

def get_looking_for_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üë® –ú—É–∂—á–∏–Ω"),
        KeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω"),
        KeyboardButton("üë• –í—Å–µ—Ö")
    )
    return keyboard

def get_interests_keyboard(selected_interests: List[int] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
    if selected_interests is None:
        selected_interests = []
        
    keyboard = InlineKeyboardMarkup(row_width=2)
    interests = get_all_interests()
    
    buttons = []
    for interest_id, interest_name in interests:
        mark = "‚úÖ " if interest_id in selected_interests else ""
        buttons.append(
            InlineKeyboardButton(
                text=f"{mark}{interest_name}",
                callback_data=f"interest_{interest_id}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        row = buttons[i:i+2]
        keyboard.row(*row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    keyboard.row(InlineKeyboardButton(
        text="–ì–æ—Ç–æ–≤–æ ‚úÖ",
        callback_data="interests_done"
    ))
    
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    if username:
        update_username(user_id, username)
    profile = get_profile(user_id)
    
    if profile:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_interests = get_user_interests(user_id)
        interests_text = ", ".join(user_interests) if user_interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∞
        gender_map = {"M": "–ú—É–∂—Å–∫–æ–π", "F": "–ñ–µ–Ω—Å–∫–∏–π"}
        looking_for_map = {
            "M": "–ú—É–∂—á–∏–Ω",
            "F": "–ñ–µ–Ω—â–∏–Ω",
            "MF": "–í—Å–µ—Ö"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {profile[1]}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {profile[2]}\n"
            f"–ü–æ–ª: {gender_map.get(profile[5], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ò—â—É: {looking_for_map.get(profile[6], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ì–æ—Ä–æ–¥: {profile[7] if profile[7] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–û —Å–µ–±–µ: {profile[3]}\n\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n\n"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=profile[4],  # photo_id
                caption=profile_text,
                reply_markup=get_main_keyboard(user_id)
            )
        except Exception as e:
            logger.error(f"Error sending profile photo: {e}")
            await message.answer(
                f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n{profile_text}",
                reply_markup=get_main_keyboard(user_id)
            )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:",
            reply_markup=get_main_keyboard(user_id)
        )

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def create_profile(message: types.Message):
    await ProfileStates.name.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message_handler(state=ProfileStates.name)
async def process_name(message: types.Message, state: FSMContext):
    if len(message.text) < 2:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=message.text)
    await ProfileStates.age.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")

@dp.message_handler(lambda message: not message.text.isdigit(), state=ProfileStates.age)
async def process_age_invalid(message: types.Message):
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.message_handler(lambda message: message.text.isdigit(), state=ProfileStates.age)
async def process_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if age < 18 or age > 100:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return
    
    await state.update_data(age=age)
    await ProfileStates.gender.set()
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ...
@dp.message_handler(state=ProfileStates.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender_map = {
        "üë® –ú—É–∂—Å–∫–æ–π": "M",
        "üë© –ñ–µ–Ω—Å–∫–∏–π": "F"
    }
    
    if message.text not in gender_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return
    
    await state.update_data(gender=gender_map[message.text])
    await ProfileStates.looking_for.set()
    await message.answer(
        "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
        reply_markup=get_looking_for_keyboard()
    )

@dp.message_handler(state=ProfileStates.looking_for)
async def process_looking_for(message: types.Message, state: FSMContext):
    looking_for_map = {
        "üë® –ú—É–∂—á–∏–Ω": "M",
        "üë© –ñ–µ–Ω—â–∏–Ω": "F",
        "üë• –í—Å–µ—Ö": "MF"
    }
    
    if message.text not in looking_for_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return
    
    await state.update_data(looking_for=looking_for_map[message.text])
    await ProfileStates.city.set()
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message_handler(state=ProfileStates.city)
async def process_city(message: types.Message, state: FSMContext):
    city = None if message.text == '-' else message.text
    await state.update_data(city=city)
    await ProfileStates.description.set()
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:")

@dp.message_handler(state=ProfileStates.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) < 10:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(description=message.text)
    await ProfileStates.photo.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ:")

@dp.message_handler(content_types=['photo'], state=ProfileStates.photo)
async def process_photo(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[-1]
        photo_id = photo.file_id
        username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        try:
            await bot.get_file(photo_id)
        except Exception as e:
            logger.error(f"Invalid photo_id: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            'photo_id': photo_id,
            'username': username
        })
        
        await ProfileStates.interests.set()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
        interests = get_all_interests()
        if not interests:
            logger.error("No interests found in database")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            return
            
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 5):",
            reply_markup=get_interests_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç—Ç–∞–ø—É —Ñ–æ—Ç–æ
        await ProfileStates.photo.set()

@dp.callback_query_handler(lambda c: c.data.startswith('interest_'), state='*')
async def process_interest_selection(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()
        
        interest_id = int(callback_query.data.split('_')[1])
        data = await state.get_data()
        
        selected_interests = data.get('selected_interests', [])
        if interest_id in selected_interests:
            selected_interests.remove(interest_id)
        else:
            if len(selected_interests) >= 5:
                await callback_query.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!", show_alert=True)
                return
            selected_interests.append(interest_id)
        
        await state.update_data(selected_interests=selected_interests)
        
        interests = get_all_interests()
        selected_names = [name for id_, name in interests if id_ in selected_interests]
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 5):\n\n"
        if selected_names:
            text += f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_names)}"
        else:
            text += "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_interests_keyboard(selected_interests)
        )
        
    except Exception as e:
        logger.error(f"Error in process_interest_selection: {e}", exc_info=True)
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")

@dp.callback_query_handler(lambda c: c.data == 'interests_done', state=ProfileStates.interests)
async def process_interests_done(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_interests = data.get('selected_interests', [])
        
        if not selected_interests:
            await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!")
            return
        
        user_id = callback_query.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å username
        add_profile(
            user_id=user_id,
            name=data['name'],
            age=data['age'],
            description=data['description'],
            photo_id=data['photo_id'],
            gender=data['gender'],
            looking_for=data['looking_for'],
            city=data.get('city'),
            username=data.get('username')
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
        clear_user_interests(user_id)
        add_user_interests(user_id, selected_interests)
        
        await state.finish()
        await callback_query.message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",
            reply_markup=get_main_keyboard(user_id)
        )
        
    except Exception as e:
        logger.error(f"Error in process_interests_done: {e}", exc_info=True)
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è",
            reply_markup=get_main_keyboard(callback_query.from_user.id)
        )

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ...

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
@dp.message_handler(lambda message: message.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def start_viewing_profiles(message: types.Message):
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_profile(user_id)
        if not user_profile:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=get_main_keyboard(user_id)
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã
        profiles = get_matching_profiles(
            user_id=user_id,
            gender=user_profile[5],  # gender
            looking_for=user_profile[6],  # looking_for
            exclude_viewed=True
        )
        
        logger.info(f"Found profiles for user {user_id}: {len(profiles)}")
        
        if not profiles:
            await message.answer(
                "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(user_id)
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state = dp.current_state(user=user_id)
        await state.update_data(
            profiles=profiles,
            current_profile_idx=0,
            viewing_profiles=True
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
        await send_next_profile(message, user_id)
        
    except Exception as e:
        logger.error(f"Error starting profile viewing: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç.",
            reply_markup=get_main_keyboard(user_id)
        )

async def send_next_profile(message: types.Message, user_id: int):
    try:
        state = dp.current_state(user=user_id)
        data = await state.get_data()
        
        profiles = data.get('profiles', [])
        current_profile_idx = data.get('current_profile_idx', 0)
        
        if not profiles or current_profile_idx >= len(profiles):
            await message.answer(
                "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(user_id)
            )
            await state.reset_data()
            return
            
        profile = profiles[current_profile_idx]
        profile_id, name, age, description, photo_id, common_interests, age_diff = profile
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
        add_viewed_profile(user_id, profile_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_interests = get_user_interests(profile_id)
        interests_text = ", ".join(user_interests) if user_interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        caption = (
            f"–ò–º—è: {name}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"–û —Å–µ–±–µ: {description}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}"
        )
        
        try:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_id,
                caption=caption,
                reply_markup=get_like_keyboard()
            )
        except Exception as photo_error:
            logger.error(f"Error sending photo: {photo_error}")
            await message.answer(
                f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n{caption}",
                reply_markup=get_like_keyboard()
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        await state.update_data(current_profile_idx=current_profile_idx + 1)
        
    except Exception as e:
        logger.error(f"Error sending profile: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç—ã.",
            reply_markup=get_main_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
@dp.message_handler(lambda message: message.text in ["‚ù§Ô∏è –õ–∞–π–∫", "üëé –î–∏–∑–ª–∞–π–∫"])
async def process_reaction(message: types.Message):
    try:
        user_id = message.from_user.id
        state = dp.current_state(user=user_id)
        data = await state.get_data()
        
        if not data.get('viewing_profiles'):
            return
            
        profiles = data.get('profiles', [])
        current_profile_idx = data.get('current_profile_idx', 0)
        
        if current_profile_idx <= 0:
            return
            
        liked_profile = profiles[current_profile_idx - 1]
        liked_user_id = liked_profile[0]
        
        if message.text == "‚ù§Ô∏è –õ–∞–π–∫":
            add_like(user_id, liked_user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–Ω—É–≤—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            liker_profile = get_profile(user_id)
            if liker_profile:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
                    liker_name = liker_profile[1]  # –ò–º—è –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ
                    notification_text = f"üîî –í–∞—Å –ª–∞–π–∫–Ω—É–ª(–∞) {liker_name}!\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª'"
                    
                    await bot.send_message(
                        chat_id=liked_user_id,
                        text=notification_text,
                        reply_markup=get_main_keyboard(liked_user_id)
                    )
                    logger.info(f"Like notification sent from {user_id} to {liked_user_id}")
                except Exception as e:
                    logger.error(f"Error sending like notification: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            if check_mutual_like(user_id, liked_user_id):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
                matched_profile = get_profile(liked_user_id)
                if matched_profile:
                    matched_name = matched_profile[1]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    match_text = f"üíï –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {matched_name}!"
                    
                    await message.answer(
                        match_text,
                        reply_markup=get_main_keyboard(user_id)
                    )
                    
                    await bot.send_message(
                        chat_id=liked_user_id,
                        text=f"üíï –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {liker_profile[1]}!",
                        reply_markup=get_main_keyboard(liked_user_id)
                    )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        await send_next_profile(message, user_id)
        
    except Exception as e:
        logger.error(f"Error processing reaction: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–π–∫–æ–≤
@dp.message_handler(lambda message: message.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª")
async def show_who_liked(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏
        recent_likes = get_recent_likes(user_id)
        logger.info(f"Retrieved likes for user {user_id}: {len(recent_likes)}")
        
        if not recent_likes:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤.",
                reply_markup=get_main_keyboard(user_id)
            )
            return
            
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫
        liked_from_id, name, age, description, photo_id, timestamp = recent_likes[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        liker_profile = get_profile(liked_from_id)
        username = liker_profile[8] if liker_profile and len(liker_profile) > 8 else "–Ω–µ—Ç_username"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –ª–∞–π–∫–∞
        await state.update_data(current_profile_id=liked_from_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        response_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        response_keyboard.row(
            KeyboardButton("üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
            KeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç")
        )
        response_keyboard.add(KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        
        caption = (
            f"–í–∞—Å –ª–∞–π–∫–Ω—É–ª(–∞):\n\n"
            f"–ò–º—è: {name}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"–û —Å–µ–±–µ: {description}\n"
        )
        
        try:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_id,
                caption=caption,
                reply_markup=response_keyboard
            )
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
            await message.answer(
                f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n{caption}",
                reply_markup=response_keyboard
            )
            
    except Exception as e:
        logger.error(f"Error in show_who_liked: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_main_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±
@dp.message_handler(lambda message: message.text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
async def handle_report(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        current_profile_idx = data.get('current_profile_idx', 0)
        profiles = data.get('profiles', [])
        
        if not profiles or current_profile_idx <= 0:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∂–∞–ª–æ–±—ã.")
            return
            
        reported_user_id = profiles[current_profile_idx - 1][0]
        add_report(message.from_user.id, reported_user_id)
        add_block(message.from_user.id, reported_user_id)
        
        await message.answer(
            "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        
    except Exception as e:
        logger.error(f"Error handling report: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.")

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


@dp.message_handler(lambda message: message.text == "‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç")
async def process_return_like(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        profile_to_like = data.get('current_profile_id')
        
        if not profile_to_like:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–∞–π–∫–∞.",
                reply_markup=get_main_keyboard(user_id)
            )
            return
            
        add_like(user_id, profile_to_like)
        logger.info(f"Return like added from {user_id} to {profile_to_like}")
        
        if check_mutual_like(user_id, profile_to_like):
            matched_profile = get_profile(profile_to_like)
            user_profile = get_profile(user_id)
            
            if matched_profile and user_profile:
                matched_name = matched_profile[1]
                user_name = user_profile[1]
                
                # –ü–æ–ª—É—á–∞–µ–º username –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                matched_username = matched_profile[8]
                contact_info = ""
                if matched_username:
                    contact_info = f"\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @{matched_username}\n–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/{matched_username}"
                
                match_text = f"üíï –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {matched_name}!{contact_info}"
                
                # –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_username = user_profile[8]
                other_contact_info = ""
                if user_username:
                    other_contact_info = f"\n\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @{user_username}\n–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/{user_username}"
                
                other_match_text = f"üíï –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {user_name}!{other_contact_info}"
                
                await message.answer(
                    match_text,
                    reply_markup=get_main_keyboard(user_id),
                    disable_web_page_preview=True
                )
                
                await bot.send_message(
                    chat_id=profile_to_like,
                    text=other_match_text,
                    reply_markup=get_main_keyboard(profile_to_like),
                    disable_web_page_preview=True
                )
        else:
            await message.answer(
                "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚ù§Ô∏è",
                reply_markup=get_main_keyboard(user_id)
            )
        
        await state.finish()
        
    except Exception as e:
        logger.error(f"Error processing return like: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞.",
            reply_markup=get_main_keyboard(user_id)
        )

# –î–æ–±–∞–≤–∏–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
@dp.message_handler(lambda message: message.text == "üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_profile(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–ø—É—â–µ–Ω.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


@dp.message_handler(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_my_profile(message: types.Message):
    try:
        user_id = message.from_user.id
        profile = get_profile(user_id)
        
        if not profile:
            await message.answer(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!",
                reply_markup=get_main_keyboard(user_id)
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_interests = get_user_interests(user_id)
        interests_text = ", ".join(user_interests) if user_interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∞
        gender_map = {"M": "–ú—É–∂—Å–∫–æ–π", "F": "–ñ–µ–Ω—Å–∫–∏–π"}
        looking_for_map = {
            "M": "–ú—É–∂—á–∏–Ω",
            "F": "–ñ–µ–Ω—â–∏–Ω",
            "MF": "–í—Å–µ—Ö"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {profile[1]}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {profile[2]}\n"
            f"–ü–æ–ª: {gender_map.get(profile[5], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ò—â—É: {looking_for_map.get(profile[6], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ì–æ—Ä–æ–¥: {profile[7] if profile[7] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–û —Å–µ–±–µ: {profile[3]}\n\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n\n"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=profile[4],  # photo_id
                caption=profile_text,
                reply_markup=get_main_keyboard(user_id)
            )
        except Exception as e:
            logger.error(f"Error sending profile photo: {e}")
            await message.answer(
                f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n{profile_text}",
                reply_markup=get_main_keyboard(user_id)
            )
            
    except Exception as e:
        logger.error(f"Error showing profile: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_main_keyboard(user_id)
        )

@dp.message_handler(lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await ProfileStates.broadcast_message.set()

@dp.message_handler(state=ProfileStates.broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_message=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=get_interests_keyboard()
    )
    await ProfileStates.broadcast_interests.set()

@dp.callback_query_handler(lambda c: c.data.startswith('interest_'), state=ProfileStates.broadcast_interests)
async def process_broadcast_interest_selection(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()
        
        interest_id = int(callback_query.data.split('_')[1])
        data = await state.get_data()
        
        selected_interests = data.get('selected_interests', [])
        if interest_id in selected_interests:
            selected_interests.remove(interest_id)
        else:
            selected_interests.append(interest_id)
        
        await state.update_data(selected_interests=selected_interests)
        
        interests = get_all_interests()
        selected_names = [name for id_, name in interests if id_ in selected_interests]
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        if selected_names:
            text += f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_names)}"
        else:
            text += "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_interests_keyboard(selected_interests)
        )
        
    except Exception as e:
        logger.error(f"Error in process_broadcast_interest_selection: {e}", exc_info=True)
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")

@dp.callback_query_handler(lambda c: c.data == 'interests_done', state=ProfileStates.broadcast_interests)
async def process_broadcast_interests_done(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_interests = data.get('selected_interests', [])
        
        if not selected_interests:
            await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!")
            return
        
        await state.update_data(selected_interests=selected_interests)
        
        ADMIN_ID = int(os.getenv('ADMIN_ID').split()[0])  # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        admin_id = ADMIN_ID  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        await bot.send_message(
            chat_id=admin_id,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {callback_query.from_user.username}:\n{data['broadcast_message']}\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join([name for id_, name in get_all_interests() if id_ in selected_interests])}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_broadcast")
            )
        )
        await callback_query.message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.finish()
        
    except Exception as e:
        logger.error(f"Error in process_broadcast_interests_done: {e}", exc_info=True)
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard(callback_query.from_user.id)
        )

@dp.callback_query_handler(lambda c: c.data == 'confirm_broadcast')
async def confirm_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    logger.info(f"Confirm broadcast button pressed by {callback_query.from_user.username}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ callback_query.message.text
        if not callback_query.message.text:
            await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
        
        message_text = callback_query.message.text.split('\n\n')[0].split(':', 1)[1].strip()
        selected_interests_text = callback_query.message.text.split('\n\n')[1].split(': ')[1]
        
        logger.info(f"Message text: {message_text}")
        logger.info(f"Selected interests: {selected_interests_text}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        all_interests = get_all_interests()
        selected_interests = [id_ for id_, name in all_interests if name in selected_interests_text.split(', ')]
        
        logger.info(f"Selected interest IDs: {selected_interests}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        users_with_interests = get_users_by_interests(selected_interests)
        
        logger.info(f"Users with selected interests: {users_with_interests}")
        
        if not users_with_interests:
            await callback_query.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏.")
            return
        
        username = callback_query.message.text.split(':')[0].split(' ')[-1]  # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        for user_id in users_with_interests:
            try:
                await bot.send_message(user_id, f"{message_text}\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @{username}")
                logger.info(f"Message sent to user {user_id}")
            except Exception as e:
                logger.error(f"Error sending message to user {user_id}: {e}")
        
        await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await state.finish()
        
    except Exception as e:
        logger.error(f"Error in confirm_broadcast: {e}", exc_info=True)
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

@dp.callback_query_handler(lambda c: c.data == 'decline_broadcast')
async def decline_broadcast(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
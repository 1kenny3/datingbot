from aiogram import types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import logging
from typing import List, Optional

from database import (
    get_profile, update_profile, get_user_interests,
    add_user_interests, get_all_interests, clear_user_interests
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
class ProfileEditStates(StatesGroup):
    waiting_for_choice = State()
    edit_name = State()
    edit_age = State()
    edit_gender = State()
    edit_looking_for = State()
    edit_city = State()
    edit_description = State()
    edit_photo = State()
    edit_interests = State()

def get_edit_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"))
    keyboard.add(KeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"))
    keyboard.add(KeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª"))
    keyboard.add(KeyboardButton("üîç –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –∏—â—É"))
    keyboard.add(KeyboardButton("üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"))
    keyboard.add(KeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"))
    keyboard.add(KeyboardButton("üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"))
    keyboard.add(KeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"))
    keyboard.add(KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return keyboard

def get_gender_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π"))
    return keyboard

def get_looking_for_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üë® –ú—É–∂—á–∏–Ω"),
        KeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω"),
        KeyboardButton("üë• –í—Å–µ—Ö")
    )
    return keyboard

def get_interests_keyboard(selected_interests: List[int] = None) -> InlineKeyboardMarkup:
    if selected_interests is None:
        selected_interests = []
        
    keyboard = InlineKeyboardMarkup(row_width=2)
    interests = get_all_interests()
    
    buttons = []
    for interest_id, interest_name in interests:
        mark = "‚úÖ " if interest_id in selected_interests else ""
        buttons.append(
            InlineKeyboardButton(
                text=f"{mark}{interest_name}",
                callback_data=f"edit_interest_{interest_id}"
            )
        )
    
    for i in range(0, len(buttons), 2):
        row = buttons[i:i+2]
        keyboard.row(*row)
    
    keyboard.row(InlineKeyboardButton(
        text="–ì–æ—Ç–æ–≤–æ ‚úÖ",
        callback_data="edit_interests_done"
    ))
    
    return keyboard

async def start_profile_editing(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_id = message.from_user.id
        profile = get_profile(user_id)
        
        if not profile:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")
            return
            
        await ProfileEditStates.waiting_for_choice.set()
        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=get_edit_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error starting profile editing: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")

async def process_edit_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        choice = message.text
        
        if choice == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
            await ProfileEditStates.edit_name.set()
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            
        elif choice == "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç":
            await ProfileEditStates.edit_age.set()
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):",
                reply_markup=ReplyKeyboardRemove()
            )
            
        elif choice == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª":
            await ProfileEditStates.edit_gender.set()
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
                reply_markup=get_gender_keyboard()
            )
            
        elif choice == "üîç –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –∏—â—É":
            await ProfileEditStates.edit_looking_for.set()
            await message.answer(
                "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
                reply_markup=get_looking_for_keyboard()
            )
            
        elif choice == "üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
            await ProfileEditStates.edit_city.set()
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):",
                reply_markup=ReplyKeyboardRemove()
            )
            
        elif choice == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
            await ProfileEditStates.edit_description.set()
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=ReplyKeyboardRemove()
            )
            
        elif choice == "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
            await ProfileEditStates.edit_photo.set()
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:",
                reply_markup=ReplyKeyboardRemove()
            )
            
        elif choice == "üéØ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã":
            await ProfileEditStates.edit_interests.set()
            user_id = message.from_user.id
            current_interests = get_user_interests(user_id)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 5):",
                reply_markup=get_interests_keyboard([int(i) for i in current_interests])
            )
            
        elif choice == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è":
            await state.finish()
            from main import get_main_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            await message.answer(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            
    except Exception as e:
        logger.error(f"Error processing edit choice: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.")

async def process_edit_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    try:
        new_name = message.text
        if len(new_name) < 2:
            await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        user_id = message.from_user.id
        update_profile(user_id, name=new_name)
        await message.answer(
            "–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")

async def process_edit_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        if not message.text.isdigit():
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        new_age = int(message.text)
        if new_age < 18 or new_age > 100:
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        user_id = message.from_user.id
        update_profile(user_id, age=new_age)
        await message.answer(
            "–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating age: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞.")

async def process_edit_gender(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∞"""
    try:
        gender_map = {
            "üë® –ú—É–∂—Å–∫–æ–π": "M",
            "üë© –ñ–µ–Ω—Å–∫–∏–π": "F"
        }
        
        if message.text not in gender_map:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
            return
            
        user_id = message.from_user.id
        update_profile(user_id, gender=gender_map[message.text])
        await message.answer(
            "–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating gender: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞.")

async def process_edit_looking_for(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞"""
    try:
        looking_for_map = {
            "üë® –ú—É–∂—á–∏–Ω": "M",
            "üë© –ñ–µ–Ω—â–∏–Ω": "F",
            "üë• –í—Å–µ—Ö": "MF"
        }
        
        if message.text not in looking_for_map:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
            return
            
        user_id = message.from_user.id
        update_profile(user_id, looking_for=looking_for_map[message.text])
        await message.answer(
            "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating looking_for: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞.")

async def process_edit_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    try:
        new_city = None if message.text == '-' else message.text
        user_id = message.from_user.id
        update_profile(user_id, city=new_city)
        await message.answer(
            "–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating city: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")

async def process_edit_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        new_description = message.text
        if len(new_description) < 10:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        user_id = message.from_user.id
        update_profile(user_id, description=new_description)
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating description: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")

async def process_edit_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    try:
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return
            
        photo = message.photo[-1]
        photo_id = photo.file_id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
            bot = Bot.get_current()
            await bot.get_file(photo_id)
        except Exception as e:
            logger.error(f"Invalid photo_id: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
            
        user_id = message.from_user.id
        update_profile(user_id, photo_id=photo_id)
        await message.answer(
            "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
            
    except Exception as e:
        logger.error(f"Error updating photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")

async def process_edit_interest_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    try:
        await callback_query.answer()
        
        interest_id = int(callback_query.data.split('_')[2])
        data = await state.get_data()
        
        selected_interests = data.get('selected_interests', [])
        if interest_id in selected_interests:
            selected_interests.remove(interest_id)
        else:
            if len(selected_interests) >= 5:
                await callback_query.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!", show_alert=True)
                return
            selected_interests.append(interest_id)
        
        await state.update_data(selected_interests=selected_interests)
        
        interests = get_all_interests()
        selected_names = [name for id_, name in interests if id_ in selected_interests]
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 5):\n\n"
        if selected_names:
            text += f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_names)}"
        else:
            text += "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_interests_keyboard(selected_interests)
        )
        
    except Exception as e:
        logger.error(f"Error in process_edit_interest_selection: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")

async def process_edit_interests_done(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    try:
        data = await state.get_data()
        selected_interests = data.get('selected_interests', [])
        
        if not selected_interests:
            await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!")
            return
        
        user_id = callback_query.from_user.id
        clear_user_interests(user_id)
        add_user_interests(user_id, selected_interests)
        
        await callback_query.message.answer(
            "–ò–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=get_edit_keyboard()
        )
        await ProfileEditStates.waiting_for_choice.set()
        
    except Exception as e:
        logger.error(f"Error in process_edit_interests_done: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(
        start_profile_editing,
        lambda message: message.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        state="*"
    )
    
    dp.register_message_handler(
        process_edit_choice,
        state=ProfileEditStates.waiting_for_choice
    )
    
    dp.register_message_handler(
        process_edit_name,
        state=ProfileEditStates.edit_name
    )
    
    dp.register_message_handler(
        process_edit_age,
        state=ProfileEditStates.edit_age
    )
    
    dp.register_message_handler(
        process_edit_gender,
        state=ProfileEditStates.edit_gender
    )
    
    dp.register_message_handler(
        process_edit_looking_for,
        state=ProfileEditStates.edit_looking_for
    )
    
    dp.register_message_handler(
        process_edit_city,
        state=ProfileEditStates.edit_city
    )
    
    dp.register_message_handler(
        process_edit_description,
        state=ProfileEditStates.edit_description
    )
    
    dp.register_message_handler(
        process_edit_photo,
        content_types=['photo'],
        state=ProfileEditStates.edit_photo
    )
    
    dp.register_callback_query_handler(
        process_edit_interest_selection,
        lambda c: c.data.startswith('edit_interest_'),
        state=ProfileEditStates.edit_interests
    )
    
    dp.register_callback_query_handler(
        process_edit_interests_done,
        lambda c: c.data == 'edit_interests_done',
        state=ProfileEditStates.edit_interests
    )